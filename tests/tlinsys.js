/* Generated by the Nim Compiler v0.16.0 */
/*   (c) 2017 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI50402 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI56816 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI56016 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI53226 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI53225 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI53209 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI124 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI53160 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI53159 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI53143 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI52817 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI128 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI52620 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI3444 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3452 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3426 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3428 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI50404 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI50439 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3438 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI12409 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3483 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3424 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3436 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3440 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3440 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3440.node = NNI3440;
var NNI3436 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3436.node = NNI3436;
NTI3483.base = NTI3424;
var NNI3424 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3483, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}]};
NTI3424.node = NNI3424;
var NNI3408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3408.node = NNI3408;
NTI3424.base = NTI3408;
NTI3436.base = NTI3424;
NTI3440.base = NTI3436;
var NNI12409 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI12409.node = NNI12409;
var NNI3438 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3438.node = NNI3438;
NTI3438.base = NTI3436;
NTI50439.base = NTI138;
var NNI50404 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: [{kind: 1, offset: 0, typ: NTI50404, name: "PRINT_ALL", len: 0, sons: null}, 
{kind: 1, offset: 1, typ: NTI50404, name: "PRINT_FAILURES", len: 0, sons: null}, 
{kind: 1, offset: 2, typ: NTI50404, name: "PRINT_NONE", len: 0, sons: null}]};
NTI50404.node = NNI50404;
var NNI3428 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3428.node = NNI3428;
var NNI3426 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3426.node = NNI3426;
NTI3426.base = NTI3424;
NTI3428.base = NTI3426;
var NNI3452 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3452.node = NNI3452;
NTI3452.base = NTI3424;
var NNI3444 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3444.node = NNI3444;
NTI3444.base = NTI3424;
NTI52620.base = NTI128;
NTI52817.base = NTI138;
NTI53160.base = NTI124;
NTI53159.base = NTI53160;
var NNI53143 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI53159, name: "data", sons: null}, 
{kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]};
NTI53143.node = NNI53143;
NTI53226.base = NTI124;
NTI53225.base = NTI53226;
var NNI53209 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI53225, name: "data", sons: null}, 
{kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]};
NTI53209.node = NNI53209;
NTI56016.base = NTI138;
NTI56816.base = NTI138;
var NNI50402 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: [{kind: 1, offset: 0, typ: NTI50402, name: "OK", len: 0, sons: null}, 
{kind: 1, offset: 1, typ: NTI50402, name: "FAILED", len: 0, sons: null}, 
{kind: 1, offset: 2, typ: NTI50402, name: "SKIPPED", len: 0, sons: null}]};
NTI50402.node = NNI50402;
function makeNimstrLit(c_13403) {

    var ln = c_13403.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_13403.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    }
function SetConstr() {

      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    }
function nimCopy(dest_18514, src_18515, ti_18516) {

var result_18829 = null;
switch (ti_18516.kind) {
case 21: case 22: case 23: case 5: if (!(isfatpointer_18497(ti_18516))) {
result_18829 = src_18515;
}
else {
result_18829 = [src_18515[0], src_18515[1]];}


break;
case 19:       if (dest_18514 === null || dest_18514 === undefined) {
        dest_18514 = {};
      }
      else {
        for (var key in dest_18514) { delete dest_18514[key]; }
      }
      for (var key in src_18515) { dest_18514[key] = src_18515[key]; }
      result_18829 = dest_18514;
    
break;
case 18: case 17: if (!((ti_18516.base == null))) {
result_18829 = nimCopy(dest_18514, src_18515, ti_18516.base);
}
else {
if ((ti_18516.kind == 17)) {
result_18829 = (dest_18514 === null || dest_18514 === undefined) ? {m_type: ti_18516} : dest_18514;}
else {
result_18829 = (dest_18514 === null || dest_18514 === undefined) ? {} : dest_18514;}
}
nimCopyAux(result_18829, src_18515, ti_18516.node);

break;
case 24: case 4: case 27: case 16:       if (src_18515 === null) {
        result_18829 = null;
      }
      else {
        if (dest_18514 === null || dest_18514 === undefined) {
          dest_18514 = new Array(src_18515.length);
        }
        else {
          dest_18514.length = src_18515.length;
        }
        result_18829 = dest_18514;
        for (var i = 0; i < src_18515.length; ++i) {
          result_18829[i] = nimCopy(result_18829[i], src_18515[i], ti_18516.base);
        }
      }
    
break;
case 28:       if (src_18515 !== null) {
        result_18829 = src_18515.slice(0);
      }
    
break;
default: 
result_18829 = src_18515;
break;
}
return result_18829;
}
function eqStrings(a_16003, b_16004) {

    if (a_16003 == b_16004) return true;
    if ((!a_16003) || (!b_16004)) return false;
    var alen = a_16003.length;
    if (alen != b_16004.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_16003[i] != b_16004[i]) return false;
    return true;
  }
function arrayConstr(len_19003, value_19004, typ_19005) {

      var result = new Array(len_19003);
      for (var i = 0; i < len_19003; ++i) result[i] = nimCopy(null, value_19004, typ_19005);
      return result;
    }
function cstrToNimstr(c_13603) {

  var ln = c_13603.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_13603.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else if((ch > 127) && (ch < 2048)) {
      result[r] = (ch >> 6) | 192;
      ++r;
      result[r] = (ch & 63) | 128;
    }
    else {
      result[r] = (ch >> 12) | 224;
      ++r;
      result[r] = ((ch >> 6) & 63) | 128;
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  }
function toJSStr(s_13803) {

    var len = s_13803.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_13803[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_13803[i] < 128)
        asciiPart[i] = fcc(s_13803[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  }
function raiseException(e_12806, ename_12807) {

e_12806.name = ename_12807;
if ((excHandler == 0)) {
unhandledException(e_12806);
}

e_12806.trace = nimCopy(null, rawwritestacktrace_12628(), NTI138);
throw e_12806;}
function rawEcho() {

var node_16230 = null;
node_16230 = document.getElementsByTagName('body')[0];if ((node_16230 === null)) {
var e_16242 = null;
e_16242 = {m_type: NTI3428, parent: null, name: null, message: null, trace: null};
e_16242.message = nimCopy(null, makeNimstrLit("<body> element does not exist yet!"), NTI138);
raiseException(e_16242, "IOError");
}

    for (var i = 0; i < arguments.length; ++i) {
      var x = toJSStr(arguments[i]);
      node_16230.appendChild(document.createTextNode(x));
    }
    node_16230.appendChild(document.createElement("br"));
    }
function chckIndx(i_19009, a_19010, b_19011) {

var Tmp1;
var result_19012 = 0;
BeforeRet: do {
if (!(a_19010 <= i_19009)) Tmp1 = false; else {Tmp1 = (i_19009 <= b_19011); }if (Tmp1) {
result_19012 = i_19009;
break BeforeRet;
}
else {
raiseIndexError();
}

} while (false); 
return result_19012;
}
function addInt(a_16256, b_16257) {

      var result = a_16256 + b_16257;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    }
function mulInt(a_16603, b_16604) {

      var result = a_16603 * b_16604;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    }
var nimvm_5887 = false;
var nim_program_result = 0;
var globalraisehook_10414 = [null];
var localraisehook_10419 = [null];
var outofmemhook_10422 = [null];
function isfatpointer_18497(ti_18499) {

var result_18500 = false;
BeforeRet: do {
result_18500 = !((SetConstr(17, 16, 4, 18, 27, 19, 23, 22, 21)[ti_18499.base.kind] != undefined));
break BeforeRet;
} while (false); 
return result_18500;
}
function nimCopyAux(dest_18519, src_18520, n_18522) {

switch (n_18522.kind) {
case 0: 
break;
case 1:       dest_18519[n_18522.offset] = nimCopy(dest_18519[n_18522.offset], src_18520[n_18522.offset], n_18522.typ);
    
break;
case 2: L1: do {
var i_18815 = 0;
var HEX3Atmp_18817 = 0;
HEX3Atmp_18817 = (n_18522.len - 1);
var res_18820 = 0;
L2: do {
L3: while (true) {
if (!(res_18820 <= HEX3Atmp_18817)) break L3;
i_18815 = res_18820;
nimCopyAux(dest_18519, src_18520, n_18522.sons[i_18815]);
res_18820 += 1;
}
} while(false);
} while(false);

break;
case 3:       dest_18519[n_18522.offset] = nimCopy(dest_18519[n_18522.offset], src_18520[n_18522.offset], n_18522.typ);
      for (var i = 0; i < n_18522.sons.length; ++i) {
        nimCopyAux(dest_18519, src_18520, n_18522.sons[i][1]);
      }
    
break;
}
}
function add_10438(x_10441, x_10441_Idx, y_10442) {

        var len = x_10441[0].length-1;
        for (var i = 0; i < y_10442.length; ++i) {
          x_10441[0][len] = y_10442.charCodeAt(i);
          ++len;
        }
        x_10441[0][len] = 0
      }
function auxwritestacktrace_12404(f_12406) {

var Tmp3;
var result_12407 = [null];
var it_12415 = f_12406;
var i_12416 = 0;
var total_12417 = 0;
var tempframes_12421 = arrayConstr(64, {Field0: null, Field1: 0}, NTI12409);
L1: do {
L2: while (true) {
if (!!((it_12415 == null))) Tmp3 = false; else {Tmp3 = (i_12416 <= 63); }if (!Tmp3) break L2;
tempframes_12421[i_12416].Field0 = it_12415.procname;
tempframes_12421[i_12416].Field1 = it_12415.line;
i_12416 += 1;
total_12417 += 1;
it_12415 = it_12415.prev;
}
} while(false);
L4: do {
L5: while (true) {
if (!!((it_12415 == null))) break L5;
total_12417 += 1;
it_12415 = it_12415.prev;
}
} while(false);
result_12407[0] = nimCopy(null, makeNimstrLit(""), NTI138);
if (!((total_12417 == i_12416))) {
if (result_12407[0] != null) { result_12407[0] = (result_12407[0].slice(0, -1)).concat(makeNimstrLit("(")); } else { result_12407[0] = makeNimstrLit("(");};
if (result_12407[0] != null) { result_12407[0] = (result_12407[0].slice(0, -1)).concat(cstrToNimstr(((total_12417 - i_12416))+"")); } else { result_12407[0] = cstrToNimstr(((total_12417 - i_12416))+"");};
if (result_12407[0] != null) { result_12407[0] = (result_12407[0].slice(0, -1)).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_12407[0] = makeNimstrLit(" calls omitted) ...\x0A");};
}

L6: do {
var j_12615 = 0;
var HEX3Atmp_12621 = 0;
HEX3Atmp_12621 = (i_12416 - 1);
var res_12624 = HEX3Atmp_12621;
L7: do {
L8: while (true) {
if (!(0 <= res_12624)) break L8;
j_12615 = res_12624;
add_10438(result_12407, 0, tempframes_12421[j_12615].Field0);
if ((0 < tempframes_12421[j_12615].Field1)) {
if (result_12407[0] != null) { result_12407[0] = (result_12407[0].slice(0, -1)).concat(makeNimstrLit(", line: ")); } else { result_12407[0] = makeNimstrLit(", line: ");};
if (result_12407[0] != null) { result_12407[0] = (result_12407[0].slice(0, -1)).concat(cstrToNimstr((tempframes_12421[j_12615].Field1)+"")); } else { result_12407[0] = cstrToNimstr((tempframes_12421[j_12615].Field1)+"");};
}

if (result_12407[0] != null) { result_12407[0] = (result_12407[0].slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_12407[0] = makeNimstrLit("\x0A");};
res_12624 -= 1;
}
} while(false);
} while(false);
return result_12407[0];
}
function rawwritestacktrace_12628() {

var result_12630 = null;
if (!((framePtr == null))) {
result_12630 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A").slice(0,-1)).concat(auxwritestacktrace_12404(framePtr)), NTI138);
}
else {
result_12630 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
}

return result_12630;
}
function unhandledException(e_12654) {

var Tmp1;
var buf_12655 = /**/[makeNimstrLit("")];
if (!!(eqStrings(e_12654.message, null))) Tmp1 = false; else {Tmp1 = !((e_12654.message[0] == 0)); }if (Tmp1) {
if (buf_12655[0] != null) { buf_12655[0] = (buf_12655[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_12655[0] = makeNimstrLit("Error: unhandled exception: ");};
if (buf_12655[0] != null) { buf_12655[0] = (buf_12655[0].slice(0, -1)).concat(e_12654.message); } else { buf_12655[0] = e_12654.message;};
}
else {
if (buf_12655[0] != null) { buf_12655[0] = (buf_12655[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_12655[0] = makeNimstrLit("Error: unhandled exception");};
}

if (buf_12655[0] != null) { buf_12655[0] = (buf_12655[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_12655[0] = makeNimstrLit(" [");};
add_10438(buf_12655, 0, e_12654.name);
if (buf_12655[0] != null) { buf_12655[0] = (buf_12655[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_12655[0] = makeNimstrLit("]\x0A");};
if (buf_12655[0] != null) { buf_12655[0] = (buf_12655[0].slice(0, -1)).concat(rawwritestacktrace_12628()); } else { buf_12655[0] = rawwritestacktrace_12628();};
var cbuf_12801 = toJSStr(buf_12655[0]);
framePtr = null;
  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_12801);
  }
  else {
    throw cbuf_12801;
  }
  }
function raiseOverflow() {

var e_13236 = null;
e_13236 = {m_type: NTI3440, parent: null, name: null, message: null, trace: null};
e_13236.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
raiseException(e_13236, "OverflowError");
}
function raiseDivByZero() {

var e_13252 = null;
e_13252 = {m_type: NTI3438, parent: null, name: null, message: null, trace: null};
e_13252.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
raiseException(e_13252, "DivByZeroError");
}
var abortonerror_50415 = [false];
var outputlevel_50416 = [0];
var coloroutput_50417 = [false];
var checkpoints_50419 = [null];
checkpoints_50419[0] = nimCopy(null, [], NTI50439);
var envoutlvl_51154 = /**/[makeNimstrLit("")];
coloroutput_50417[0] = false;
if ((0 < (envoutlvl_51154[0] != null ? envoutlvl_51154[0].length-1 : 0))) {
L1: do {
var opt_51414 = [0];
var res_51427 = 0;
L2: do {
L3: while (true) {
if (!(res_51427 <= 2)) break L3;
opt_51414[0] = res_51427;
if (eqStrings(cstrToNimstr(NTI50404.node.sons[opt_51414[0]].name), envoutlvl_51154[0])) {
outputlevel_50416[0] = opt_51414[0];
break L1;
}

res_51427 += 1;
}
} while(false);
} while(false);
}

function startsuite_50444(name_50446) {

var F={procname:"unittest.startSuite",prev:framePtr,filename:"lib\\pure\\unittest.nim",line:0};
framePtr = F;
rawEcho(makeNimstrLit("\x0A[Suite] "), name_50446);
framePtr = F.prev;
}
function raiseIndexError() {

var e_13284 = null;
e_13284 = {m_type: NTI3452, parent: null, name: null, message: null, trace: null};
e_13284.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
raiseException(e_13284, "IndexError");
}
function sysfatal_21021(message_21027) {

var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"lib\\system.nim",line:0};
framePtr = F;
F.line = 2578;
var e_21029 = null;
e_21029 = {m_type: NTI3444, parent: null, name: null, message: null, trace: null};
F.line = 2580;
e_21029.message = nimCopy(null, message_21027, NTI138);
F.line = 2581;
raiseException(e_21029, "AssertionError");
framePtr = F.prev;
}
function raiseassert_21016(msg_21018) {

var F={procname:"system.raiseAssert",prev:framePtr,filename:"lib\\system.nim",line:0};
framePtr = F;
sysfatal_21021(msg_21018);
framePtr = F.prev;
}
function failedassertimpl_21039(msg_21041) {

var F={procname:"system.failedAssertImpl",prev:framePtr,filename:"lib\\system.nim",line:0};
framePtr = F;
raiseassert_21016(msg_21041);
framePtr = F.prev;
}
function HEX5BHEX5DHEX3D_52270(m_52307, i_52309, j_52311, val_52313) {

var F={procname:"[]=.[]=",prev:framePtr,filename:"C:\\Users\\stisa\\OneDrive\\Progetti\\snail\\snail\\matrix.nim",line:0};
framePtr = F;
if (!((i_52309 < 3))) {
failedassertimpl_21039(makeNimstrLit("i < N Row index out of bounds"));
}

if (!((j_52311 < 3))) {
failedassertimpl_21039(makeNimstrLit("j < M Column index out of bounds"));
}

F.line = 36;
m_52307.data[chckIndx(addInt(mulInt(i_52309, 3), j_52311), 0, m_52307.data.length)-0] = val_52313;
framePtr = F.prev;
}
function matrix_52033(arr_52064) {

var result_52096 = [{data: null}];
var F={procname:"matrix.matrix",prev:framePtr,filename:"C:\\Users\\stisa\\OneDrive\\Progetti\\snail\\snail\\matrix.nim",line:0};
framePtr = F;
result_52096[0].data = new Float64Array(9);
L1: do {
F.line = 76;
var i_52233 = 0;
F.line = 76;
var r_52234 = new Float64Array(3);
F.line = 2080;
var i_52609 = 0;
if ((i_52609 <= 2)) {
L2: do {
F.line = 2082;
L3: while (true) {
if (!true) break L3;
F.line = 2080;
i_52233 = i_52609;
F.line = 2083;
r_52234 = arr_52064[chckIndx(i_52609, 0, arr_52064.length)-0];
L4: do {
F.line = 77;
var j_52267 = 0;
F.line = 77;
var c_52268 = 0.0;
F.line = 2080;
var i_52606 = 0;
if ((i_52606 <= 2)) {
L5: do {
F.line = 2082;
L6: while (true) {
if (!true) break L6;
F.line = 2080;
j_52267 = i_52606;
F.line = 2083;
c_52268 = r_52234[chckIndx(i_52606, 0, r_52234.length)-0];
HEX5BHEX5DHEX3D_52270(result_52096[0], i_52233, j_52267, c_52268);
if ((2 <= i_52606)) {
F.line = 2084;
break L5;
}

i_52606 = addInt(i_52606, 1);
}
} while(false);
}

} while(false);
if ((2 <= i_52609)) {
F.line = 2084;
break L2;
}

i_52609 = addInt(i_52609, 1);
}
} while(false);
}

} while(false);
framePtr = F.prev;
return result_52096[0];
}
function colvec_52615(arr_52633) {

var result_52665 = {data: null};
var F={procname:"colVec.colVec",prev:framePtr,filename:"C:\\Users\\stisa\\OneDrive\\Progetti\\snail\\snail\\vector.nim",line:0};
framePtr = F;
result_52665.data = new Float64Array(3);
F.line = 39;
nimCopy(result_52665.data, arr_52633, NTI52620);
framePtr = F.prev;
return result_52665;
}
function shouldrun_50440(testname_50442) {

var result_50443 = false;
var F={procname:"unittest.shouldRun",prev:framePtr,filename:"lib\\pure\\unittest.nim",line:0};
framePtr = F;
F.line = 95;
result_50443 = true;
framePtr = F.prev;
return result_50443;
}
function nsuformatBiggestFloat(f_38410, format_38411, precision_38413, decimalsep_38414) {

var result_38415 = null;
var res_38601 = null;
switch (format_38411) {
case 0: res_38601 = f_38410.toString();
break;
case 1: res_38601 = f_38410.toFixed(precision_38413);
break;
case 2: res_38601 = f_38410.toExponential(precision_38413);
break;
}
result_38415 = nimCopy(null, cstrToNimstr(res_38601), NTI138);
L1: do {
var i_38611 = 0;
var HEX3Atmp_38625 = 0;
HEX3Atmp_38625 = (result_38415 != null ? result_38415.length-1 : 0);
var i_38628 = 0;
L2: do {
L3: while (true) {
if (!(i_38628 < HEX3Atmp_38625)) break L3;
i_38611 = i_38628;
if ((SetConstr(46, 44)[result_38415[i_38611]] != undefined)) {
result_38415[i_38611] = decimalsep_38414;
}

i_38628 += 1;
}
} while(false);
} while(false);
return result_38415;
}
function nsuformatFloat(f_38632, format_38633, precision_38635, decimalsep_38636) {

var result_38637 = null;
result_38637 = nimCopy(null, nsuformatBiggestFloat(f_38632, format_38633, precision_38635, decimalsep_38636), NTI138);
return result_38637;
}
function HEX24_55219(v_55254) {

var Tmp4;
var result_55255 = null;
var F={procname:"$.$",prev:framePtr,filename:"C:\\Users\\stisa\\OneDrive\\Progetti\\snail\\snail\\vector.nim",line:0};
framePtr = F;
F.line = 60;
result_55255 = nimCopy(null, makeNimstrLit("["), NTI138);
if ((v_55254.data === null)) {
if (result_55255 != null) { result_55255 = (result_55255.slice(0, -1)).concat(makeNimstrLit("nil]\x0A")); } else { result_55255 = makeNimstrLit("nil]\x0A");};
}
else {
L1: do {
F.line = 63;
var i_55278 = 0;
F.line = 63;
var e_55279 = 0.0;
F.line = 2078;
var HEX3Atmp_55284 = new Float64Array(3);
F.line = 63;
HEX3Atmp_55284 = v_55254.data;
F.line = 2080;
var i_55287 = 0;
if ((i_55287 <= 2)) {
L2: do {
F.line = 2082;
L3: while (true) {
if (!true) break L3;
F.line = 2080;
i_55278 = i_55287;
F.line = 2083;
e_55279 = HEX3Atmp_55284[chckIndx(i_55287, 0, HEX3Atmp_55284.length)-0];
F.line = 64;
if ((0.0 <= e_55279)) {
Tmp4 = [43].concat(nsuformatFloat(e_55279, 1, 2, 46));
}
else {
Tmp4 = nsuformatFloat(e_55279, 1, 2, 46);
}

var fstring_55281 = nimCopy(null, Tmp4, NTI138);
if ((i_55278 == 2)) {
if (result_55255 != null) { result_55255 = (result_55255.slice(0, -1)).concat((fstring_55281.slice(0,-1)).concat(makeNimstrLit("]"))); } else { result_55255 = (fstring_55281.slice(0,-1)).concat(makeNimstrLit("]"));};
}
else {
if (result_55255 != null) { result_55255 = (result_55255.slice(0, -1)).concat((fstring_55281.slice(0,-1)).concat(makeNimstrLit("|\x0A|"))); } else { result_55255 = (fstring_55281.slice(0,-1)).concat(makeNimstrLit("|\x0A|"));};
}

if ((2 <= i_55287)) {
F.line = 2084;
break L2;
}

i_55287 = addInt(i_55287, 1);
}
} while(false);
}

} while(false);
}

framePtr = F.prev;
return result_55255;
}
function HEX5BHEX5D_53602(m_53638, i_53640, j_53642) {

var result_53643 = 0.0;
var F={procname:"[].[]",prev:framePtr,filename:"C:\\Users\\stisa\\OneDrive\\Progetti\\snail\\snail\\matrix.nim",line:0};
framePtr = F;
F.line = 29;
if (!((i_53640 < 3))) {
failedassertimpl_21039(makeNimstrLit("i < N Row index out of bounds"));
}

if (!((j_53642 < 3))) {
failedassertimpl_21039(makeNimstrLit("j < M Column index out of bounds"));
}

result_53643 = m_53638.data[chckIndx(addInt(mulInt(i_53640, 3), j_53642), 0, m_53638.data.length)-0];
framePtr = F.prev;
return result_53643;
}
function findrowwithmaxincol_53412(A_53448, col_53450) {

var result_53451 = 0;
var F={procname:"findRowWithMaxInCol.findRowWithMaxInCol",prev:framePtr,filename:"C:\\Users\\stisa\\OneDrive\\Progetti\\snail\\snail\\linsys.nim",line:0};
framePtr = F;
if (!((col_53450 < 3))) {
failedassertimpl_21039(makeNimstrLit("col < M "));
}

F.line = 5;
var lastmax_54001 = HEX5BHEX5D_53602(A_53448, 0, col_53450);
L1: do {
F.line = 6;
var i_54011 = 0;
F.line = 3689;
var i_54101 = 0;
L2: do {
F.line = 3690;
L3: while (true) {
if (!(i_54101 < 3)) break L3;
F.line = 3689;
i_54011 = i_54101;
if ((lastmax_54001 < HEX5BHEX5D_53602(A_53448, i_54011, col_53450))) {
F.line = 8;
lastmax_54001 = HEX5BHEX5D_53602(A_53448, i_54011, col_53450);
F.line = 9;
result_53451 = i_54011;
}

i_54101 = addInt(i_54101, 1);
}
} while(false);
} while(false);
framePtr = F.prev;
return result_53451;
}
function swaprow_54105(A_54142, frm_54144, to_54146) {

var F={procname:"swapRow.swapRow",prev:framePtr,filename:"C:\\Users\\stisa\\OneDrive\\Progetti\\snail\\snail\\linsys.nim",line:0};
framePtr = F;
if (!((frm_54144 < 3))) {
failedassertimpl_21039(makeNimstrLit("frm < N "));
}

if (!((to_54146 < 3))) {
failedassertimpl_21039(makeNimstrLit("to < N "));
}

L1: do {
F.line = 15;
var i_54410 = 0;
F.line = 3689;
var i_54591 = 0;
L2: do {
F.line = 3690;
L3: while (true) {
if (!(i_54591 < 3)) break L3;
F.line = 3689;
i_54410 = i_54591;
F.line = 16;
var f_54454 = HEX5BHEX5D_53602(A_54142, frm_54144, i_54410);
HEX5BHEX5DHEX3D_52270(A_54142, frm_54144, i_54410, HEX5BHEX5D_53602(A_54142, to_54146, i_54410));
HEX5BHEX5DHEX3D_52270(A_54142, to_54146, i_54410, f_54454);
i_54591 = addInt(i_54591, 1);
}
} while(false);
} while(false);
framePtr = F.prev;
}
function HEX5BHEX5D_54595(v_54601, i_54603) {

var result_54604 = 0.0;
var F={procname:"[].[]",prev:framePtr,filename:"C:\\Users\\stisa\\OneDrive\\Progetti\\snail\\snail\\vector.nim",line:0};
framePtr = F;
F.line = 50;
result_54604 = v_54601.data[chckIndx(i_54603, 0, v_54601.data.length)-0];
framePtr = F.prev;
return result_54604;
}
function HEX5BHEX5DHEX3D_54618(v_54624, i_54626, val_54628) {

var F={procname:"[]=.[]=",prev:framePtr,filename:"C:\\Users\\stisa\\OneDrive\\Progetti\\snail\\snail\\vector.nim",line:0};
framePtr = F;
F.line = 52;
v_54624.data[chckIndx(i_54626, 0, v_54624.data.length)-0] = val_54628;
framePtr = F.prev;
}
function divrowby_54686(A_54723, row_54725, val_54727) {

var F={procname:"divRowBy.divRowBy",prev:framePtr,filename:"C:\\Users\\stisa\\OneDrive\\Progetti\\snail\\snail\\matrix.nim",line:0};
framePtr = F;
if (!((row_54725 < 3))) {
failedassertimpl_21039(makeNimstrLit("row < N "));
}

L1: do {
F.line = 217;
var j_54810 = 0;
F.line = 3689;
var i_54902 = 0;
L2: do {
F.line = 3690;
L3: while (true) {
if (!(i_54902 < 3)) break L3;
F.line = 3689;
j_54810 = i_54902;
HEX5BHEX5DHEX3D_52270(A_54723, row_54725, j_54810, (HEX5BHEX5D_53602(A_54723, row_54725, j_54810) / val_54727));
i_54902 = addInt(i_54902, 1);
}
} while(false);
} while(false);
framePtr = F.prev;
}
function subtractrows_54983(A_55020, fm_55022, wht_55024, tims_55026) {

var F={procname:"subtractRows.subtractRows",prev:framePtr,filename:"C:\\Users\\stisa\\OneDrive\\Progetti\\snail\\snail\\linsys.nim",line:0};
framePtr = F;
L1: do {
F.line = 31;
var j_55036 = 0;
F.line = 3689;
var i_55171 = 0;
L2: do {
F.line = 3690;
L3: while (true) {
if (!(i_55171 < 3)) break L3;
F.line = 3689;
j_55036 = i_55171;
HEX5BHEX5DHEX3D_52270(A_55020, fm_55022, j_55036, (HEX5BHEX5D_53602(A_55020, fm_55022, j_55036) - (HEX5BHEX5D_53602(A_55020, wht_55024, j_55036) * tims_55026)));
i_55171 = addInt(i_55171, 1);
}
} while(false);
} while(false);
framePtr = F.prev;
}
function ppge_53138(A_53173, b_53206) {

var result_53238 = {data: null};
var F={procname:"ppge.ppge",prev:framePtr,filename:"C:\\Users\\stisa\\OneDrive\\Progetti\\snail\\snail\\linsys.nim",line:0};
framePtr = F;
F.line = 40;
var tempa_53239 = /**/[nimCopy(null, A_53173, NTI53143)];
L1: do {
F.line = 45;
var i_53410 = 0;
F.line = 3689;
var i_55216 = 0;
L2: do {
F.line = 3690;
L3: while (true) {
if (!(i_55216 < 3)) break L3;
F.line = 3689;
i_53410 = i_55216;
if (!((i_53410 == 2))) {
F.line = 47;
var imx_54103 = findrowwithmaxincol_53412(tempa_53239[0], i_53410);
swaprow_54105(tempa_53239[0], imx_54103, i_53410);
F.line = 51;
var tmp_54605 = HEX5BHEX5D_54595(result_53238, imx_54103);
HEX5BHEX5DHEX3D_54618(result_53238, imx_54103, HEX5BHEX5D_54595(result_53238, i_53410));
HEX5BHEX5DHEX3D_54618(result_53238, i_53410, tmp_54605);
}

F.line = 55;
var piv_54684 = HEX5BHEX5D_53602(tempa_53239[0], i_53410, i_53410);
divrowby_54686(tempa_53239[0], i_53410, piv_54684);
HEX5BHEX5DHEX3D_54618(result_53238, i_53410, (HEX5BHEX5D_54595(result_53238, i_53410) / piv_54684));
L4: do {
F.line = 59;
var j_54937 = 0;
F.line = 3689;
var i_55212 = 0;
L5: do {
F.line = 3690;
L6: while (true) {
if (!(i_55212 < 3)) break L6;
F.line = 3689;
j_54937 = i_55212;
if (!((j_54937 == i_53410))) {
F.line = 62;
var tims_54981 = HEX5BHEX5D_53602(tempa_53239[0], j_54937, i_53410);
subtractrows_54983(tempa_53239[0], j_54937, i_53410, tims_54981);
HEX5BHEX5DHEX3D_54618(result_53238, j_54937, (HEX5BHEX5D_54595(result_53238, j_54937) - (HEX5BHEX5D_54595(result_53238, i_53410) * tims_54981)));
}

i_55212 = addInt(i_55212, 1);
}
} while(false);
} while(false);
i_55216 = addInt(i_55216, 1);
}
} while(false);
} while(false);
framePtr = F.prev;
return result_53238;
}
function HEX5C_53002(m_53037, v_53070) {

var result_53136 = {data: null};
var F={procname:"\\.\\",prev:framePtr,filename:"tlinsys.nim",line:0};
framePtr = F;
F.line = 7;
nimCopy(result_53136, ppge_53138(m_53037, v_53070), NTI53209);
framePtr = F.prev;
return result_53136;
}
function checkpoint_50816(msg_50818) {

var F={procname:"unittest.checkpoint",prev:framePtr,filename:"lib\\pure\\unittest.nim",line:0};
framePtr = F;
if (checkpoints_50419[0] != null) { checkpoints_50419[0].push(msg_50818); } else { checkpoints_50419[0] = [msg_50818]; };
framePtr = F.prev;
}
function testdone_50609(name_50611, s_50612, indent_50613) {

var Tmp1;
var Tmp2;
var F={procname:"unittest.testDone",prev:framePtr,filename:"lib\\pure\\unittest.nim",line:0};
framePtr = F;
if ((s_50612 == 1)) {
nim_program_result = addInt(nim_program_result, 1);
}

F.line = 152;
if (indent_50613) {
Tmp1 = makeNimstrLit("  ");
}
else {
Tmp1 = makeNimstrLit("");
}

var prefix_50632 = nimCopy(null, Tmp1, NTI138);
if (!!((outputlevel_50416[0] == 2))) Tmp2 = false; else {Tmp2 = ((outputlevel_50416[0] == 0) || (s_50612 == 1)); }if (Tmp2) {
rawEcho(prefix_50632, makeNimstrLit("["), cstrToNimstr(NTI50402.node.sons[s_50612].name), makeNimstrLit("] "), name_50611);
}

framePtr = F.prev;
}
var Tmp6;
L4: do {
var testinsuiteimplflag_52020 = true;
startsuite_50444(makeNimstrLit("Tests for snail/linsys"));
var A_52610 = /**/[matrix_52033([[0.0, 5.0000000000000000e+000, 6.0000000000000000e+000], [4.0000000000000000e+000, 5.0000000000000000e+000, 7.0000000000000000e+000], [9.0000000000000000e+000, 2.0000000000000000e+000, 3.0000000000000000e+000]])];
var b_52801 = /**/[colvec_52615([1.1000000000000000e+001, 1.6000000000000000e+001, 1.5000000000000000e+001])];
if (shouldrun_50440(makeNimstrLit("Pretty printing and approximate sol"))) {
checkpoints_50419[0] = nimCopy(null, [], NTI52817);
var teststatusimpl_52818 = /**/[0];
++excHandler;
Tmp6 = framePtr;
try {
L7: do {
var HEX3Ac1_55288 = /**/[HEX24_55219(HEX5C_53002(A_52610[0], b_52801[0]))];
if (!(eqStrings(HEX3Ac1_55288[0], makeNimstrLit("[+1.15|\x0A|+1.73|\x0A|+0.39]")))) {
checkpoint_50816(makeNimstrLit("tlinsys.nim(14,18): Check failed: $ (A \\ b) == \"[+1.15|\\x0A|+1.73|\\x0A|+0.39]\""));
checkpoint_50816((makeNimstrLit("$ (A \\ b) was ").slice(0,-1)).concat(HEX3Ac1_55288[0]));
var prefix_55402 = makeNimstrLit("    ");
L8: do {
var msg_55404 = [null];
var i_56830 = 0;
var L_56832 = (checkpoints_50419[0] != null ? checkpoints_50419[0].length : 0);
L9: do {
L10: while (true) {
if (!(i_56830 < L_56832)) break L10;
msg_55404[0] = checkpoints_50419[0][i_56830];
rawEcho(prefix_55402, msg_55404[0]);
i_56830 += 1;
if (!(((checkpoints_50419[0] != null ? checkpoints_50419[0].length : 0) == L_56832))) {
failedassertimpl_21039(makeNimstrLit("len(a) == L seq modified while iterating over it"));
}

}
} while(false);
} while(false);
teststatusimpl_52818[0] = 1;
checkpoints_50419[0] = nimCopy(null, [], NTI56016);
}

} while(false);
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
framePtr = Tmp6;
var prefix_56402 = makeNimstrLit("    ");
L11: do {
var msg_56404 = [null];
var i_56836 = 0;
var L_56838 = (checkpoints_50419[0] != null ? checkpoints_50419[0].length : 0);
L12: do {
L13: while (true) {
if (!(i_56836 < L_56838)) break L13;
msg_56404[0] = checkpoints_50419[0][i_56836];
rawEcho(prefix_56402, msg_56404[0]);
i_56836 += 1;
if (!(((checkpoints_50419[0] != null ? checkpoints_50419[0].length : 0) == L_56838))) {
failedassertimpl_21039(makeNimstrLit("len(a) == L seq modified while iterating over it"));
}

}
} while(false);
} while(false);
teststatusimpl_52818[0] = 1;
checkpoints_50419[0] = nimCopy(null, [], NTI56816);
lastJSError = prevJSError;
} finally {
framePtr = Tmp6;
testdone_50609(makeNimstrLit("Pretty printing and approximate sol"), teststatusimpl_52818[0], true);
}
}

} while(false);
